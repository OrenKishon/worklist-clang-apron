#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Program analysis and verification - Final project
\end_layout

\begin_layout Author
Oren Kishon, Asya Frumkin
\end_layout

\begin_layout Date
November 2014
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
This work is the final project of the course Program Analysis and Verification
 by Noam Rinetzky, 2014.
\end_layout

\begin_layout Standard
The project's purpose was to create a static analysis software tool to detect
 index-out-of-bound errors in C programs using methods of abstract interpretatio
n.
\end_layout

\begin_layout Standard
The analysis tool takes as input a C function and anlyzes it using a fixed
 point iteration algorithm on the blocks of its control flow graph.
 The analysis is done by abstracting variables value to the interval domain.
 Propagation through the blocks is done by Join and Meet operations on the
 abstract values.
\end_layout

\begin_layout Section*
Software tools
\end_layout

\begin_layout Standard
This new software tool is based on two software libraries.
 
\end_layout

\begin_layout Itemize
Clang
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

: The LLVM compiler's C language frontend.
 Clang has the ability of parsing a C program and creating its control flow
 graph and its abstract syntax tree.
 It also provides API for iterating over these CFG and AST nodes, and each
 statement and expression inside these nodes (or blocks).
 It does not, however, has the feature of fixed-point iteration analysis
 based on abstract values, and this is a needed feature we have found requests
 for over the internet.
 Clang does have the feature of analysis based on symbolic execution (reffered
 to as 
\begin_inset Quotes eld
\end_inset

Path sensitive analysis
\begin_inset Quotes erd
\end_inset

) which goes down path conditions of a program, but this algorithm was not
 what we desired.
\end_layout

\begin_layout Itemize
Apron
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

: A software library for numerical analysis in abstract interpretation.
 Used for transforming variable values to the interval domains and applying
 linear expression constraints on them and the operations join and meet.
\end_layout

\begin_layout Standard
A short manual on using our tool is in the appendix.
\end_layout

\begin_layout Section*
CFG creation and the fixed point algorithm
\end_layout

\begin_layout Standard
The first thing done by the program is to create the CFG data structure
 of the input function.
 This is done by Clang.
 Clang can also actually run a graphic program in the OS to plot the CFG.
 See figure 1 and figure 2 for an example of a program and its CFG.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loop example input function
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/loop_example.png
	width 70text%
	clip

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loop example CFG
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/loop_example_cfg.png
	width 70text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The blocks of the CFG are iterated in a worklist algorithm (referred to
 also as chaotic iteration) implemented according to the one learned in
 class (see figure 3).
 The implementation can bee seen in figure 4.
 It is very simple: At the beginning all of the blocks are in the queue
 (with all abstract values initialized to bottom).
 Popped blocks are processed by the transfer functions.
 If their values have changed, then their successors in the CFG are re-queued
 in the queue.
 This goes on until no more changes occure.
 If an error has been found, in out case - an put-of-bound index error,
 the iteration is aborted.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Worklist algorithm from class
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/worklist.png
	width 70text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Worklist algorithm imlpementation
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/worklist_impl.png
	width 70text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Processing done on a CFG block
\end_layout

\begin_layout Standard
The Clang block data structure holds the block's statements list and pointers
 to the neighboring blocks (predecessors and successors).
 To this existing data structure we have added an 
\begin_inset Quotes eld
\end_inset

Apron context
\begin_inset Quotes erd
\end_inset

 which carries the array of abstract values of a block.
 The list of tracked variables is common between all blocks, but each block
 assigns different abstract values to them.
 Beside this abstract value context, each block also holds a list of entry
 values.
 This list is actually updated by the predecessors of the block when they
 are finished being processed.
 At the beggining of a run on a block, its entry value is computed by applying
 a join on all of this list's members.
 In the same way, the block will update its successors' entry values when
 it finishes each run, according to the condition in its termination statement.
 To sum up the algorithm of a songle run on a block:
\end_layout

\begin_layout Enumerate
Compute entry value by 
\begin_inset Quotes eld
\end_inset

join
\begin_inset Quotes erd
\end_inset

ing all values in predecessors values list
\end_layout

\begin_layout Enumerate
Mutate this abstract value by the transfer functions of the block's statemets
 (the assignments)
\end_layout

\begin_layout Enumerate
Pass updated values to successor blocks' entry lists.
\end_layout

\begin_layout Standard
The code for running on a single block is in figure 5.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Run on a single block
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/runOnBlock.png
	width 70page%
	clip

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Transfer functions
\end_layout

\begin_layout Standard
The transfer functions are implemented using a visitor design pattern.
 In every assignment statement, the abstract value of the assignee variable
 is updated using Apron's API.
 Assignment in Apron is done by creating a linear expression combined of
 other variables and constant values.
 A code snippet of the assignment function is in figure 6.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Assignment using Apron
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/apronAssign.png
	width 70page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Branching
\end_layout

\begin_layout Standard
when ever a block is terminated in a branch statement (If, while, etc) it
 means each of its successors should receive the block exit value after
 being transformed by an 
\begin_inset Quotes eld
\end_inset

assume
\begin_inset Quotes erd
\end_inset

 transformation (see figure 7).
 A new abstract value array is created for each branch (one for the 
\begin_inset Quotes eld
\end_inset

then
\begin_inset Quotes erd
\end_inset

 and one for the 
\begin_inset Quotes eld
\end_inset

else
\begin_inset Quotes erd
\end_inset

, see figure 8) and each of these values is updated in its matching successor
 block's entry values list.
 The assume transdormation is actually a meet operation with the corresponding
 constraint of the branch.
 The implementation of these transformers in Apron is by creating a constraint
 and applying a meet operation between the abstract value and the constraint.
 See figure 9 for the implementation, including the special case of the
 
\begin_inset Quotes eld
\end_inset

!=
\begin_inset Quotes erd
\end_inset

 condition.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Assume transformers
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/Assume.png
	width 40page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating entry values for next blocks using constraints
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/then_else.png
	width 60page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Implementation of assume transformers using Apron
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/meet_constraint.png
	width 70page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Array index out-of-bound checking
\end_layout

\begin_layout Standard
When applying the transfer functions on assignments, the analysis tool also
 checks whether an array subscript expression (For example: A[i]) could
 be using an index with a value out of bounds of the array allowed indexes
 (below 0 or more than the size).
 In this case, the potentail error is reported to output and the tool aborts.
 As far as our implementation goes, this check can be performed on arrays
 with constant size (for example, declared as 
\begin_inset Quotes eld
\end_inset

int A[32]
\begin_inset Quotes erd
\end_inset

) but with the check index being an abstract value.
 Extending it to dynamic array sizes is a matter of further development
 over the Clang AST code.
 The implementation in Apron of the check of the abstract index is similiar
 to the other linear-expression-constraints operations described in other
 sections.
 The one unique thing here is the use of the Apron function 
\begin_inset Quotes eld
\end_inset

ap_abstract1_sat_lincons(...)
\begin_inset Quotes erd
\end_inset

 which takes an abstract value and a constraint, and checks if the value
 satisfies the constraint.
 
\end_layout

\begin_layout Section*
Results
\end_layout

\begin_layout Standard
Figure 10 shows the result output of the loop_example() function described
 in the previous sections.
 This function has no errors, so the iteration reaches a fixed point.
 This output should be viewed along with the CFG of the function.
 It can be observed that the exit block, [B0], has the correct value of
 1000, and the error block, [B1], has the value of bottom because its not
 reachable.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Output for loop_example()
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/loop_example_output.png
	width 40page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next is an example of a program with an array index error.
 In figure 11, in the analysis output , it can be seen that the analysis
 has discovered the error when the index 'i' has reached the possible value
 of 10, the smallest un-allowed value, and aborted the analysis with a proper
 report to output.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Array test function: Code, CFG and analysis output
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/array_test.png
	width 15page%

\end_inset


\begin_inset Graphics
	filename Figures/array_test_cfg.png
	width 20page%

\end_inset


\begin_inset Graphics
	filename Figures/array_test_output.png
	width 40page%
	clip

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

clang: a C language family frontend for LLVM http://clang.llvm.org/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

APRON numerical abstract domain library http://apron.cri.ensmp.fr/library/
\end_layout

\end_body
\end_document
